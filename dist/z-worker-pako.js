!function(){"use strict";function t(t,n){return class{constructor(e){const s=t=>{if(this.pendingData){const n=this.pendingData;this.pendingData=new Uint8Array(n.length+t.length),this.pendingData.set(n,0),this.pendingData.set(t,n.length)}else this.pendingData=new Uint8Array(t)};if(this.codec=new t(Object.assign({},n,e)),"function"==typeof this.codec.onData)this.codec.onData=s;else{if("function"!=typeof this.codec.on)throw new Error("Cannot register the callback function.");this.codec.on("data",s)}}async append(t){return this.codec.push(t),e(this)}async flush(){return this.codec.push(new Uint8Array(0),!0),e(this)}};function e(t){if(t.pendingData){const n=t.pendingData;return t.pendingData=null,n}return new Uint8Array(0)}}class n{constructor(){this.crc=-1,this.table=(()=>{const t=[];for(let n=0;n<256;n++){let e=n;for(let t=0;t<8;t++)1&e?e=e>>>1^3988292384:e>>>=1;t[n]=e}return t})()}append(t){const n=this.table;let e=0|this.crc;for(let s=0,i=0|t.length;s<i;s++)e=e>>>8^n[255&(e^t[s])];this.crc=e}get(){return~this.crc}}const e="Invalid pasword",s=16,i={name:"PBKDF2"},a={name:"HMAC"},r="SHA-1",c={name:"AES-CTR"},h=Object.assign({hash:a},i),o=Object.assign({iterations:1e3,hash:{name:r}},i),p=Object.assign({hash:r},a),u=Object.assign({length:s},c),d=["deriveBits"],l=["sign"],y=528,g=10,w=[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],f=crypto.subtle;class b{constructor(t,n){this.password=t,this.signed=n,this.input=n&&new Uint8Array(0),this.pendingInput=new Uint8Array(0)}async append(t){const n=async(e=0)=>{if(e+s<=a.length-g){const t=a.subarray(e,e+s),r=await f.decrypt(Object.assign({counter:this.counter},u),this.keys.decryption,t);return U(this.counter),i.set(new Uint8Array(r),e),n(e+s)}return this.pendingInput=a.subarray(e),this.signed&&(this.input=m(this.input,t)),i};if(this.password){const n=t.subarray(0,18);await async function(t,n,s){t.counter=new Uint8Array(w);const i=n.subarray(0,16),a=n.subarray(16),r=(new TextEncoder).encode(s),u=await f.importKey("raw",r,h,!1,d),y=await f.deriveBits(Object.assign({salt:i},o),u,528),g=new Uint8Array(y),b=g.subarray(64);if(t.keys={decryption:await f.importKey("raw",g.subarray(0,32),c,!0,["decrypt"]),authentication:await f.importKey("raw",g.subarray(32,64),p,!1,l),passwordVerification:b},b[0]!=a[0]||b[1]!=a[1])throw new Error(e)}(this,n,this.password),this.password=null,t=t.subarray(18)}let i=new Uint8Array(t.length-g-(t.length-g)%s),a=t;return this.pendingInput.length&&(a=m(this.pendingInput,t),i=D(i,a.length-g-(a.length-g)%s)),n()}async flush(){const t=this.pendingInput,n=this.keys,e=t.subarray(0,t.length-g),s=t.subarray(t.length-g);let i=new Uint8Array(0);if(e.length){const t=await f.decrypt(Object.assign({counter:this.counter},u),n.decryption,e);i=new Uint8Array(t)}let r=!0;if(this.signed){const t=await f.sign(a,n.authentication,this.input.subarray(0,this.input.length-g)),e=new Uint8Array(t);this.input=null;for(let t=0;t<g;t++)e[t]!=s[t]&&(r=!1)}return{valid:r,data:i}}}class A{constructor(t){this.password=t,this.output=new Uint8Array(0),this.pendingInput=new Uint8Array(0)}async append(t){const n=async(a=0)=>{if(a+s<=t.length){const r=t.subarray(a,a+s),c=await f.encrypt(Object.assign({counter:this.counter},u),this.keys.encryption,r);return U(this.counter),i.set(new Uint8Array(c),a+e.length),n(a+s)}return this.pendingInput=t.subarray(a),this.output=m(this.output,i),i};let e=new Uint8Array(0);this.password&&(e=await async function(t,n){t.counter=new Uint8Array(w);const e=crypto.getRandomValues(new Uint8Array(16)),s=(new TextEncoder).encode(n),i=await f.importKey("raw",s,h,!1,d),a=await f.deriveBits(Object.assign({salt:e},o),i,y),r=new Uint8Array(a);return t.keys={encryption:await f.importKey("raw",r.subarray(0,32),c,!0,["encrypt"]),authentication:await f.importKey("raw",r.subarray(32,64),p,!1,l),passwordVerification:r.subarray(64)},m(e,t.keys.passwordVerification)}(this,this.password),this.password=null);let i=new Uint8Array(e.length+t.length-t.length%s);return i.set(e,0),this.pendingInput.length&&(t=m(this.pendingInput,t),i=D(i,t.length-t.length%s)),n()}async flush(){let t=new Uint8Array(0);if(this.pendingInput.length){const n=await f.encrypt(Object.assign({counter:this.counter},u),this.keys.encryption,this.pendingInput);t=new Uint8Array(n),this.output=m(this.output,t)}const n=await f.sign(a,this.keys.authentication,this.output.subarray(18));this.output=null;const e=new Uint8Array(n).subarray(0,g);return{data:m(t,e),signature:e}}}function U(t){for(let n=0;n<16;n++){if(255!=t[n]){t[n]++;break}t[n]=0}}function m(t,n){let e=t;return t.length+n.length&&(e=new Uint8Array(t.length+n.length),e.set(t,0),e.set(n,t.length)),e}function D(t,n){if(n&&n>t.length){const e=t;(t=new Uint8Array(n)).set(e,0)}return t}const I="Invalid signature";class k{constructor(t){this.signature=t.inputSignature,this.encrypted=Boolean(t.inputPassword),this.signed=t.inputSigned,this.compressed=t.inputCompressed,this.inflate=this.compressed&&new ZipInflate,this.crc32=this.signed&&this.signed&&new n,this.decryption=this.encrypted&&new b(t.inputPassword)}async append(t){return this.encrypted&&(t=await this.decryption.append(t)),this.compressed&&t.length&&(t=await this.inflate.append(t)),!this.encrypted&&this.signed&&this.crc32.append(t),t}async flush(){let t,n=new Uint8Array(0);if(this.encrypted){const t=await this.decryption.flush();if(!t.valid)throw new Error(I);n=t.data}else if(this.signed){const n=new DataView(new Uint8Array(4).buffer);if(t=this.crc32.get(),n.setUint32(0,t),this.signature!=n.getUint32(0,!1))throw new Error(I)}return this.compressed&&(n=await this.inflate.append(n)||new Uint8Array(0),await this.inflate.flush()),{data:n,signature:t}}}class v{constructor(t){this.encrypted=t.outputEncrypted,this.signed=t.outputSigned,this.compressed=t.outputCompressed,this.deflate=this.compressed&&new ZipDeflate({level:t.level||5}),this.crc32=this.signed&&new n,this.encrypt=this.encrypted&&new A(t.outputPassword)}async append(t){let n=t;return this.compressed&&t.length&&(n=await this.deflate.append(t)),this.encrypted?n=await this.encrypt.append(n):this.signed&&this.crc32.append(t),n}async flush(){let t,n=new Uint8Array(0);if(this.compressed&&(n=await this.deflate.flush()||new Uint8Array(0)),this.encrypted){n=await this.encrypt.append(n);const e=await this.encrypt.flush();t=e.signature;const s=new Uint8Array(n.length+e.data.length);s.set(n,0),s.set(e.data,n.length),n=s}else this.signed&&(t=this.crc32.get());return{data:n,signature:t}}}const E={async init(t){t.scripts&&t.scripts.length>0&&t.scripts.length&&importScripts.apply(void 0,t.scripts);const n=t.options;self.initExternalCodec&&self.initExternalCodec(),j=await async function(t){return t.codecType.startsWith("deflate")?new v(t):t.codecType.startsWith("inflate")?new k(t):void 0}(n)},append:async t=>({data:await j.append(t.data)}),flush:()=>j.flush()};let j;addEventListener("message",(async t=>{const n=t.data,e=n.type,s=E[e];if(s)try{const t=await s(n)||{};if(t.type=e,t.data)try{postMessage(t,[t.data.buffer])}catch(n){postMessage(t)}else postMessage(t)}catch(t){postMessage({type:e,error:{message:t.message,stack:t.stack}})}})),self.initExternalCodec=()=>{const{ZipDeflate:n,ZipInflate:e}=((n,e={})=>({ZipDeflate:t(n.Deflate,e.deflate),ZipInflate:t(n.Inflate,e.inflate)}))(pako,{deflate:{raw:!0},inflate:{raw:!0}});self.ZipDeflate=n,self.ZipInflate=e}}();
